version: '3.8'

services:
  # MySQL 데이터베이스 서비스
  db:
    image: mysql:8.0
    container_name: bolivia-db
    restart: unless-stopped
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    volumes:
      - db_data:/var/lib/mysql
      - ./db/init:/docker-entrypoint-initdb.d:ro
    networks:
      - bolivia-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Spring Boot 백엔드 서비스
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: bolivia-backend
    restart: unless-stopped
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:mysql://db:3306/${MYSQL_DATABASE}?useSSL=false&serverTimezone=Asia/Seoul&allowPublicKeyRetrieval=true&characterEncoding=UTF-8
      - SPRING_DATASOURCE_USERNAME=${MYSQL_USER}
      - SPRING_DATASOURCE_PASSWORD=${MYSQL_PASSWORD}
      - APP_JWT_SECRET=${JWT_SECRET}
      - APP_JWT_COOKIE_DOMAIN=localhost
      - APP_JWT_COOKIE_SECURE=false
      - CORS_ALLOWED_ORIGINS=http://localhost,http://localhost:3000
    depends_on:
      db:
        condition: service_healthy
    networks:
      - bolivia-network
    volumes:
      - ./uploads:/app/uploads

  # React + Nginx 프론트엔드 서비스
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: bolivia-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      - REACT_APP_API_URL=http://localhost/api
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - backend
    networks:
      - bolivia-network

volumes:
  db_data:
    driver: local

networks:
  bolivia-network:
    driver: bridge