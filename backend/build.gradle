plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.4'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

repositories {
	mavenCentral()
}

ext {
  jjwtVersion      = '0.11.5'
  // 필요할 때만 사용 (OpenPDF 등에서 요구 시)
  bcVersion        = '1.76'          // ← Java 17은 jdk15on 라인 사용
  poiVersion       = '5.2.5'         // (BOM 기본 버전으로 충분하면 생략)
  xmlbeansVersion  = '5.1.1'
  compressVersion  = '1.26.2'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc' // Para JdbcTemplate
	//implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	//runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	//runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql' // MySQL용 Flyway
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'com.github.librepdf:openpdf:1.3.39'
    //implementation 'org.apache.poi:poi:5.2.5'
    //implementation 'org.apache.poi:poi-ooxml:5.2.5'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'


	// JJWT
	implementation "io.jsonwebtoken:jjwt-api:${jjwtVersion}"
	runtimeOnly    "io.jsonwebtoken:jjwt-impl:${jjwtVersion}"
	runtimeOnly    "io.jsonwebtoken:jjwt-jackson:${jjwtVersion}"

	// OpenPDF (BOM 미관리라면 명시)
	implementation 'com.github.librepdf:openpdf:1.3.39'

	// Apache POI (BOM 기본이 OK면 아래 4줄을 constraints로만 올리거나 아예 생략)
	implementation "org.apache.poi:poi:${poiVersion}"
	implementation("org.apache.poi:poi-ooxml:${poiVersion}")
    // xmlbeans를 별도 핀으로 맞출 때만 exclude; 보통은 생략 가능
    // exclude group: 'org.apache.xmlbeans', module: 'xmlbeans'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

}

tasks.named('test') {
	useJUnitPlatform()
}

dependencies {
  // 필요한 경우에만 override — BOM 관리 바깥/상향 시
  constraints {
    implementation "org.apache.xmlbeans:xmlbeans:${xmlbeansVersion}"  // 필요 시
    implementation "org.apache.commons:commons-compress:${compressVersion}"
    // BouncyCastle가 정말 필요할 때만 추가
    implementation "org.bouncycastle:bcprov-jdk15on:${bcVersion}"
    implementation "org.bouncycastle:bcpkix-jdk15on:${bcVersion}"
  }
}

// (가능하면 지양) 광범위 resolutionStrategy 대신 constraints 우선.
// 정말 불가피할 때만 좁은 범위로 사용:
configurations.all {
  resolutionStrategy.eachDependency { details ->
    if (details.requested.group == 'org.bouncycastle' &&
        details.requested.name.startsWith('bcprov')) {
      details.useVersion bcVersion
      details.because('Align BouncyCastle artifacts to avoid mixed versions')
    }
  }
}
